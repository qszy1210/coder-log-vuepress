(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{451:function(s,t,r){"use strict";r.r(t);var a=r(43),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,r=s._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[r("h2",{attrs:{id:"csrf-攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#csrf-攻击"}},[s._v("#")]),s._v(" csrf 攻击")]),s._v(" "),r("p",[s._v("方式: 通过在另外一个网站访问目标地址进行攻击(访问具体网站的时候会带上本地浏览器的cookie, 如果这个时候正好用户在另外一个tab进行了登录,并且session还没有失效, 那么服务器就接受了此次请求)")]),s._v(" "),r("h2",{attrs:{id:"举例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#举例"}},[s._v("#")]),s._v(" 举例")]),s._v(" "),r("p",[s._v("比如网站A的合法用户 user1 刚登陆完, 此时候打开了另一个存在风险的网站B, B 网站有一个攻击性请求到 网站A, 由于此时候 user1 在网站A是登陆状态, 那么网站A 是接受 网站B 的请求的. 造成了 csrf (cross site request forgery)")]),s._v(" "),r("h2",{attrs:{id:"csrf-防御"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#csrf-防御"}},[s._v("#")]),s._v(" csrf 防御")]),s._v(" "),r("ol",[r("li",[s._v("验证域名的方式(验证来源), 即通过请求地址验证合法性, 但是这个方式容易被客户端伪造")]),s._v(" "),r("li",[s._v("请求地址增加token, 在访问的时候, 服务器统一返回一个固定的token, 在每一个请求中带上这个token. 可以通过检测 header 中的 refer 进行获取")]),s._v(" "),r("li",[s._v("在请求的 header 中增加 token,(ajax统一设置, 但是也要接受ajax访问的坏处)")])]),s._v(" "),r("h2",{attrs:{id:"xss攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xss攻击"}},[s._v("#")]),s._v(" xss攻击")]),s._v(" "),r("p",[s._v("xss 解释为 cross-site scripting, 跨站脚本攻击; 利用web 漏洞让用户去执行特定的脚本")]),s._v(" "),r("h2",{attrs:{id:"xss-防御-不相信用户的输入"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xss-防御-不相信用户的输入"}},[s._v("#")]),s._v(" xss 防御 (不相信用户的输入)")]),s._v(" "),r("ol",[r("li",[s._v("过滤特殊字符")]),s._v(" "),r("li",[s._v("转义html实体")]),s._v(" "),r("li",[s._v("http only cookie")]),s._v(" "),r("li",[s._v("javascript 编码, 对动态的 js 代码进行转义")])])])}),[],!1,null,null,null);t.default=e.exports}}]);